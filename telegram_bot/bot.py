import json
from logger import logger
import asyncio
import os
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.enums import ParseMode, ChatAction
from aiogram.types import Message, CallbackQuery, ChatJoinRequest, FSInputFile, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from spam_protection import AntiSpamMiddleware
from datetime import datetime
from aiogram.utils.markdown import hcode
from scheduler import start_scheduler 


# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
load_dotenv('.env')
TOKEN = os.getenv("BOT_TOKEN")
PRIVATE_CHANNEL_ID = os.getenv("PRIVATE_CHANNEL_ID")
ADMINS = os.getenv("ADMINS")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not PRIVATE_CHANNEL_ID:
    raise ValueError("‚ùå PRIVATE_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not ADMINS:
    raise ValueError("‚ùå ADMINS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())


with open("files/random_messages.json", encoding="utf-8") as f:
    fallback_replies = json.load(f)


async def send_service_message(bot: Bot, text: str):
    if PRIVATE_CHANNEL_ID:
        await bot.send_message(PRIVATE_CHANNEL_ID, text)


async def welcome_user(user_id: int):
    # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    photo_path = FSInputFile("files/welcome.png")
    welcome_message = """
        <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D-space.</b>

–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ–±—É—á–∞—é—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã dept. –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫—É—Ä—Å—ã –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏. 

<b>–î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:</b>
        """
    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫ –±–æ—Ç—É
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url="https://t.me/dept_mainbot/dspace")
    kb.adjust(1)

    await bot.send_photo(user_id, photo_path, caption=welcome_message, reply_markup=kb.as_markup())


# === –°—Ç–∞—Ä—Ç ===
@dp.message(F.chat.type == "private", CommandStart())
async def start_handler(message: Message, state: FSMContext, command: CommandObject):
    if not message.from_user:
        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return
   
    user = message.from_user
    logger.info(f"{user.full_name} –Ω–∞–∂–∞–ª start")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–ø–ª–∏–Ω–∫–æ–≤ (/start <payload>)
    if command and command.args:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–∏–ø–ª–∏–Ω–∫ payload: {command.args}")
    await welcome_user(user.id)
     # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    await send_service_message(bot, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} {user.first_name} {user.last_name} –Ω–∞–∂–∞–ª /start –≤ –±–æ—Ç–µ")


@dp.message(F.chat.type == "private")
async def fallback_handler(message: Message):
    if not message.from_user:
        return
    
    reply = random.choice(fallback_replies)
    logger.info(f"–ó–∞–≥–ª—É—à–∫–∞: {message.from_user.full_name} –Ω–∞–ø–∏—Å–∞–ª: {message.text}")
    await message.answer(reply)


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    if ADMINS:
        try:
            admin_id = int(ADMINS)
            await bot.send_message(admin_id, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMINS: {ADMINS}")


    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    dp.message.middleware(AntiSpamMiddleware(bot))
    dp.callback_query.middleware(AntiSpamMiddleware(bot))


    scheduler_task = asyncio.create_task(start_scheduler(bot))
    try:
        await dp.start_polling(bot, drop_pending_updates=True)
    finally:
        scheduler_task.cancel()
        if ADMINS:
            try:
                admin_id = int(ADMINS)
                await bot.send_message(admin_id, text="ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ValueError:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMINS: {ADMINS}")


if __name__ == "__main__":
    asyncio.run(main())